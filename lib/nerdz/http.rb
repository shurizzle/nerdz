#--
# Copyleft shura. [ shura1991@gmail.com ]
#
# This file is part of nerdz.
#
# nerdz is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# nerdz is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with nerdz. If not, see <http://www.gnu.org/licenses/>.
#++

require 'cookiejar'
require 'nerdz/rebinds'

module CookieJar
  class Jar
    def self.load_ns(file)
      self.from_ns(File.read(file))
    end

    def self.from_ns(string)
      jar = self.new

      string.each_line {|l|
        if l =~ (/^((?:^[^^]+))\s+(TRUE|FALSE)\s+(\S+)\s+(TRUE|FALSE)\s+(\d+)\s+(\S+)\s+(\S+)\s*$/)
          jar.add_cookie Cookie.new(domain: $1, path: $3, secure: $4 == 'TRUE' ? true : false,
                     expires_at: Time.at($5.to_i), name: $6, value: $7)
        end
      }

      jar
    end

    def to_ns
      "# Netscape HTTP Cookie File\n" +
      "# http://curl.haxx.se/rfc/cookie_spec.html\n" +
      "# This file was generated by nerdz! Edit at your own risk.\n\n" +
      to_a.map {|cookie|
        "#{cookie.domain}\t#{cookie.domain[0] == ?. ? 'TRUE' : 'FALSE'}\t#{cookie.path} #{cookie.secure ? 'TRUE' : 'FALSE'}"+
          "\t#{cookie.expires_at.to_i}\t#{cookie.name}\t#{cookie.value}\n" if !cookie.session?
      }.compact.join
    end

    def save_ns(file)
      File.open(file, 'w') {|f|
        f.write(self.to_ns)
      }
    end

    def [](name)
      self.get_cookies('http://www.megaupload.com/').select {|cookie|
        cookie.name == name
      }.first
    end
  end
end

class Nerdz
  class HTTP
    attr_reader :cookies

    def initialize
      @cookies = CookieJar::Jar.new
    end

    def post(path, params = {}, data = {}, initheader = nil, &blk)
      self.__request(initheader) {|http, headers|
        http.post(path, params, data, headers, nil, &blk)
      }
    end

    def request(action, data = {})
      self.post('/api.php', {action: action}, data)
    end

  protected
    def __request(initheader)
      return unless block_given?
      initheader = {} unless initheader.is_a?(Hash)

      initheader['Cookie'] = @cookies.get_cookie_header('http://www.nerdz.eu/')

      response, * = yield(Net::HTTP.start('www.nerdz.eu', 80), initheader)

      @cookies.set_cookies_from_headers('http://www.nerdz.eu/', response)
      response
    end
  end
end
